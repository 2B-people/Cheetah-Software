function constraint_jacobian_nz = Jump2DConstraintJacobian(in1,dt,in3,m,Iyy,mu_g)
%JUMP2DCONSTRAINTJACOBIAN
%    CONSTRAINT_JACOBIAN_NZ = JUMP2DCONSTRAINTJACOBIAN(IN1,DT,IN3,M,IYY,MU_G)

%    This function was generated by the Symbolic Math Toolbox version 8.3.
%    27-Aug-2019 12:28:05

rxb = in3(3,:);
rxf = in3(1,:);
rzb = in3(4,:);
rzf = in3(2,:);
sb = in1(2,:);
sf = in1(1,:);
t2 = dt.^2;
t3 = mu_g+1.0;
t4 = 1.0./Iyy;
t5 = -dt;
t6 = 1.0./m;
t7 = mu_g-1.0;
t8 = dt.*sb.*t6;
t9 = dt.*sf.*t6;
t10 = sb.*t5.*t6;
t11 = sf.*t5.*t6;
t12 = (sb.*t2.*t6)./2.0;
t13 = (sf.*t2.*t6)./2.0;
t14 = -t12;
t15 = -t13;
constraint_jacobian_nz = [-1.0;-1.0;-1.0;t5;-1.0;t5;-1.0;t5;-1.0;1.0;1.0;1.0;1.0;1.0;1.0;t15;rzf.*sf.*t2.*t4.*(-1.0./2.0);t11;rzf.*sf.*t4.*t5;t15;(rxf.*sf.*t2.*t4)./2.0;t11;dt.*rxf.*sf.*t4;-sf.*t7;-sf.*t3;t14;rzb.*sb.*t2.*t4.*(-1.0./2.0);t10;rzb.*sb.*t4.*t5;t14;(rxb.*sb.*t2.*t4)./2.0;t10;dt.*rxb.*sb.*t4;-sb.*t7;-sb.*t3];
