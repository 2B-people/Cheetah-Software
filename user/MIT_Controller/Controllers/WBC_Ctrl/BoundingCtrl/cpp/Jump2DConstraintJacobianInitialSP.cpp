//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Jump2DConstraintJacobianInitialSP.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 26-Aug-2019 18:20:14
//

// Include Files
#include "rt_nonfinite.h"
#include "Jump2DBounds.h"
#include "Jump2DConstraintJacobian.h"
#include "Jump2DConstraintJacobianFinal.h"
#include "Jump2DConstraintJacobianFinalSP.h"
#include "Jump2DConstraintJacobianInitial.h"
#include "Jump2DConstraintJacobianInitialSP.h"
#include "Jump2DConstraintJacobianSP.h"
#include "Jump2DConstraints.h"
#include "Jump2DConstraintsFinal.h"
#include "Jump2DConstraintsInitial.h"
#include "Jump2DCost.h"
#include "Jump2DCostGradient.h"
#include "Jump2DInitialize.h"
#include "Jump2DLagrangianHessian.h"
#include "Jump2DLagrangianHessianFinal.h"
#include "Jump2DLagrangianHessianFinalSP.h"
#include "Jump2DLagrangianHessianInitial.h"
#include "Jump2DLagrangianHessianInitialSP.h"
#include "Jump2DLagrangianHessianSP.h"

// Function Definitions

//
// JUMP2DCONSTRAINTJACOBIANINITIALSP
//     [ROW_INDEX_INITIAL_CJ,COL_INDEX_INITIAL_CJ] = JUMP2DCONSTRAINTJACOBIANINITIALSP(ITER,NUM_X,NUM_C)
// Arguments    : double iter
//                double NUM_X
//                double NUM_C
//                double row_index_initial_CJ[26]
//                double col_index_initial_CJ[26]
// Return Type  : void
//
void Jump2DConstraintJacobianInitialSP(double iter, double NUM_X, double NUM_C,
  double row_index_initial_CJ[26], double col_index_initial_CJ[26])
{
  double t2;

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     26-Aug-2019 18:15:41
  t2 = NUM_C * iter;
  row_index_initial_CJ[0] = t2;
  row_index_initial_CJ[1] = t2 + 1.0;
  row_index_initial_CJ[2] = t2 + 2.0;
  row_index_initial_CJ[3] = t2 + 3.0;
  row_index_initial_CJ[4] = t2 + 4.0;
  row_index_initial_CJ[5] = t2 + 5.0;
  row_index_initial_CJ[6] = t2;
  row_index_initial_CJ[7] = t2 + 2.0;
  row_index_initial_CJ[8] = t2 + 3.0;
  row_index_initial_CJ[9] = t2 + 5.0;
  row_index_initial_CJ[10] = t2 + 1.0;
  row_index_initial_CJ[11] = t2 + 2.0;
  row_index_initial_CJ[12] = t2 + 4.0;
  row_index_initial_CJ[13] = t2 + 5.0;
  row_index_initial_CJ[14] = t2 + 6.0;
  row_index_initial_CJ[15] = t2 + 7.0;
  row_index_initial_CJ[16] = t2;
  row_index_initial_CJ[17] = t2 + 2.0;
  row_index_initial_CJ[18] = t2 + 3.0;
  row_index_initial_CJ[19] = t2 + 5.0;
  row_index_initial_CJ[20] = t2 + 1.0;
  row_index_initial_CJ[21] = t2 + 2.0;
  row_index_initial_CJ[22] = t2 + 4.0;
  row_index_initial_CJ[23] = t2 + 5.0;
  row_index_initial_CJ[24] = t2 + 8.0;
  row_index_initial_CJ[25] = t2 + 9.0;
  t2 = NUM_X * iter;
  col_index_initial_CJ[0] = t2;
  col_index_initial_CJ[1] = t2 + 1.0;
  col_index_initial_CJ[2] = t2 + 2.0;
  col_index_initial_CJ[3] = t2 + 3.0;
  col_index_initial_CJ[4] = t2 + 4.0;
  col_index_initial_CJ[5] = t2 + 5.0;
  col_index_initial_CJ[6] = t2 + 6.0;
  col_index_initial_CJ[7] = t2 + 6.0;
  col_index_initial_CJ[8] = t2 + 6.0;
  col_index_initial_CJ[9] = t2 + 6.0;
  col_index_initial_CJ[10] = t2 + 7.0;
  col_index_initial_CJ[11] = t2 + 7.0;
  col_index_initial_CJ[12] = t2 + 7.0;
  col_index_initial_CJ[13] = t2 + 7.0;
  col_index_initial_CJ[14] = t2 + 7.0;
  col_index_initial_CJ[15] = t2 + 7.0;
  col_index_initial_CJ[16] = t2 + 8.0;
  col_index_initial_CJ[17] = t2 + 8.0;
  col_index_initial_CJ[18] = t2 + 8.0;
  col_index_initial_CJ[19] = t2 + 8.0;
  col_index_initial_CJ[20] = t2 + 9.0;
  col_index_initial_CJ[21] = t2 + 9.0;
  col_index_initial_CJ[22] = t2 + 9.0;
  col_index_initial_CJ[23] = t2 + 9.0;
  col_index_initial_CJ[24] = t2 + 9.0;
  col_index_initial_CJ[25] = t2 + 9.0;
}

//
// File trailer for Jump2DConstraintJacobianInitialSP.cpp
//
// [EOF]
//
