/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * Jump2DLagrangianHessianInitial.cpp
 *
 * Code generation for function 'Jump2DLagrangianHessianInitial'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "Jump2DBounds.h"
#include "Jump2DConstraintJacobian.h"
#include "Jump2DConstraintJacobianFinal.h"
#include "Jump2DConstraintJacobianFinalSP.h"
#include "Jump2DConstraintJacobianInitial.h"
#include "Jump2DConstraintJacobianInitialSP.h"
#include "Jump2DConstraintJacobianSP.h"
#include "Jump2DConstraints.h"
#include "Jump2DConstraintsFinal.h"
#include "Jump2DConstraintsInitial.h"
#include "Jump2DCost.h"
#include "Jump2DCostGradient.h"
#include "Jump2DInitialize.h"
#include "Jump2DLagrangianHessian.h"
#include "Jump2DLagrangianHessianFinal.h"
#include "Jump2DLagrangianHessianFinalSP.h"
#include "Jump2DLagrangianHessianInitial.h"
#include "Jump2DLagrangianHessianInitialSP.h"
#include "Jump2DLagrangianHessianSP.h"

/* Function Definitions */
void Jump2DLagrangianHessianInitial(const double in1[6], const double in2[4],
  double obj_factor, double lagrangian_hessian_initial_nz[10])
{
  /* JUMP2DLAGRANGIANHESSIANINITIAL */
  /*     LAGRANGIAN_HESSIAN_INITIAL_NZ = JUMP2DLAGRANGIANHESSIANINITIAL(IN1,IN2,OBJ_FACTOR) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
  /*     27-Aug-2019 12:38:35 */
  lagrangian_hessian_initial_nz[0] = obj_factor * in1[0] * 2.0;
  lagrangian_hessian_initial_nz[1] = obj_factor * in1[1] * 2.0;
  lagrangian_hessian_initial_nz[2] = obj_factor * in1[2] * 2.0;
  lagrangian_hessian_initial_nz[3] = obj_factor * in1[3] * 2.0;
  lagrangian_hessian_initial_nz[4] = obj_factor * in1[4] * 2.0;
  lagrangian_hessian_initial_nz[5] = obj_factor * in1[5] * 2.0;
  lagrangian_hessian_initial_nz[6] = obj_factor * in2[0] * 2.0;
  lagrangian_hessian_initial_nz[7] = obj_factor * in2[1] * 2.0;
  lagrangian_hessian_initial_nz[8] = obj_factor * in2[2] * 2.0;
  lagrangian_hessian_initial_nz[9] = obj_factor * in2[3] * 2.0;
}

/* End of code generation (Jump2DLagrangianHessianInitial.cpp) */
