//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Jump2DLagrangianHessianFinal.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 26-Aug-2019 18:20:14
//

// Include Files
#include "rt_nonfinite.h"
#include "Jump2DBounds.h"
#include "Jump2DConstraintJacobian.h"
#include "Jump2DConstraintJacobianFinal.h"
#include "Jump2DConstraintJacobianFinalSP.h"
#include "Jump2DConstraintJacobianInitial.h"
#include "Jump2DConstraintJacobianInitialSP.h"
#include "Jump2DConstraintJacobianSP.h"
#include "Jump2DConstraints.h"
#include "Jump2DConstraintsFinal.h"
#include "Jump2DConstraintsInitial.h"
#include "Jump2DCost.h"
#include "Jump2DCostGradient.h"
#include "Jump2DInitialize.h"
#include "Jump2DLagrangianHessian.h"
#include "Jump2DLagrangianHessianFinal.h"
#include "Jump2DLagrangianHessianFinalSP.h"
#include "Jump2DLagrangianHessianInitial.h"
#include "Jump2DLagrangianHessianInitialSP.h"
#include "Jump2DLagrangianHessianSP.h"

// Function Definitions

//
// JUMP2DLAGRANGIANHESSIANFINAL
//     LAGRANGIAN_HESSIAN_FINAL_NZ = JUMP2DLAGRANGIANHESSIANFINAL(IN1,IN2,OBJ_FACTOR)
// Arguments    : const double in1[6]
//                const double in2[4]
//                double obj_factor
//                double lagrangian_hessian_final_nz[10]
// Return Type  : void
//
void Jump2DLagrangianHessianFinal(const double in1[6], const double in2[4],
  double obj_factor, double lagrangian_hessian_final_nz[10])
{
  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     26-Aug-2019 18:15:42
  lagrangian_hessian_final_nz[0] = obj_factor * in1[0] * 2.0;
  lagrangian_hessian_final_nz[1] = obj_factor * in1[1] * 2.0;
  lagrangian_hessian_final_nz[2] = obj_factor * in1[2] * 2.0;
  lagrangian_hessian_final_nz[3] = obj_factor * in1[3] * 2.0;
  lagrangian_hessian_final_nz[4] = obj_factor * in1[4] * 2.0;
  lagrangian_hessian_final_nz[5] = obj_factor * in1[5] * 2.0;
  lagrangian_hessian_final_nz[6] = obj_factor * in2[0] * 2.0;
  lagrangian_hessian_final_nz[7] = obj_factor * in2[1] * 2.0;
  lagrangian_hessian_final_nz[8] = obj_factor * in2[2] * 2.0;
  lagrangian_hessian_final_nz[9] = obj_factor * in2[3] * 2.0;
}

//
// File trailer for Jump2DLagrangianHessianFinal.cpp
//
// [EOF]
//
