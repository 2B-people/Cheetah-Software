/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * Jump2DLagrangianHessianSP.cpp
 *
 * Code generation for function 'Jump2DLagrangianHessianSP'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "Jump2DBounds.h"
#include "Jump2DConstraintJacobian.h"
#include "Jump2DConstraintJacobianFinal.h"
#include "Jump2DConstraintJacobianFinalSP.h"
#include "Jump2DConstraintJacobianInitial.h"
#include "Jump2DConstraintJacobianInitialSP.h"
#include "Jump2DConstraintJacobianSP.h"
#include "Jump2DConstraints.h"
#include "Jump2DConstraintsFinal.h"
#include "Jump2DConstraintsInitial.h"
#include "Jump2DCost.h"
#include "Jump2DCostGradient.h"
#include "Jump2DInitialize.h"
#include "Jump2DLagrangianHessian.h"
#include "Jump2DLagrangianHessianFinal.h"
#include "Jump2DLagrangianHessianFinalSP.h"
#include "Jump2DLagrangianHessianInitial.h"
#include "Jump2DLagrangianHessianInitialSP.h"
#include "Jump2DLagrangianHessianSP.h"

/* Function Definitions */
void Jump2DLagrangianHessianSP(double iter, double NUM_X, double row_index_H[10],
  double col_index_H[10])
{
  double t2;

  /* JUMP2DLAGRANGIANHESSIANSP */
  /*     [ROW_INDEX_H,COL_INDEX_H] = JUMP2DLAGRANGIANHESSIANSP(ITER,NUM_X) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.0. */
  /*     27-Aug-2019 12:38:34 */
  t2 = NUM_X * iter;
  row_index_H[0] = t2;
  row_index_H[1] = t2 + 1.0;
  row_index_H[2] = t2 + 2.0;
  row_index_H[3] = t2 + 3.0;
  row_index_H[4] = t2 + 4.0;
  row_index_H[5] = t2 + 5.0;
  row_index_H[6] = t2 + 6.0;
  row_index_H[7] = t2 + 7.0;
  row_index_H[8] = t2 + 8.0;
  row_index_H[9] = t2 + 9.0;
  memcpy(&col_index_H[0], &row_index_H[0], 10U * sizeof(double));
}

/* End of code generation (Jump2DLagrangianHessianSP.cpp) */
