//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Jump2DBounds.cpp
//
// MATLAB Coder version            : 3.2
// C/C++ source code generated on  : 26-Aug-2019 18:20:14
//

// Include Files
#include "rt_nonfinite.h"
#include "Jump2DBounds.h"
#include "Jump2DConstraintJacobian.h"
#include "Jump2DConstraintJacobianFinal.h"
#include "Jump2DConstraintJacobianFinalSP.h"
#include "Jump2DConstraintJacobianInitial.h"
#include "Jump2DConstraintJacobianInitialSP.h"
#include "Jump2DConstraintJacobianSP.h"
#include "Jump2DConstraints.h"
#include "Jump2DConstraintsFinal.h"
#include "Jump2DConstraintsInitial.h"
#include "Jump2DCost.h"
#include "Jump2DCostGradient.h"
#include "Jump2DInitialize.h"
#include "Jump2DLagrangianHessian.h"
#include "Jump2DLagrangianHessianFinal.h"
#include "Jump2DLagrangianHessianFinalSP.h"
#include "Jump2DLagrangianHessianInitial.h"
#include "Jump2DLagrangianHessianInitialSP.h"
#include "Jump2DLagrangianHessianSP.h"

// Function Definitions

//
// JUMP2DBOUNDS
//     [DECISION_VARS_LB,DECISION_VARS_UB,CONSTRAINTS_UB,CONSTRAINTS_LB] = JUMP2DBOUNDS(IN1,IN2,IN3,IN4,IN5)
// Arguments    : const double in1[6]
//                const double in2[6]
//                const double in3[4]
//                const double in4[4]
//                const double in5[2]
//                double decision_vars_lb[10]
//                double decision_vars_ub[10]
//                double constraints_ub[10]
//                double constraints_lb[10]
// Return Type  : void
//
void Jump2DBounds(const double in1[6], const double in2[6], const double in3[4],
                  const double in4[4], const double in5[2], double
                  decision_vars_lb[10], double decision_vars_ub[10], double
                  constraints_ub[10], double constraints_lb[10])
{
  int i;
  static const double dv0[10] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0E+19,
    -2.0E+19, -2.0E+19, -2.0E+19 };

  //     This function was generated by the Symbolic Math Toolbox version 7.1.
  //     26-Aug-2019 18:15:39
  decision_vars_lb[0] = in2[0];
  decision_vars_lb[1] = in2[1];
  decision_vars_lb[2] = in2[2];
  decision_vars_lb[3] = in2[3];
  decision_vars_lb[4] = in2[4];
  decision_vars_lb[5] = in2[5];
  decision_vars_lb[6] = in4[0] * in5[0];
  decision_vars_lb[7] = in4[1] * in5[0];
  decision_vars_lb[8] = in4[2] * in5[1];
  decision_vars_lb[9] = in4[3] * in5[1];
  decision_vars_ub[0] = in1[0];
  decision_vars_ub[1] = in1[1];
  decision_vars_ub[2] = in1[2];
  decision_vars_ub[3] = in1[3];
  decision_vars_ub[4] = in1[4];
  decision_vars_ub[5] = in1[5];
  decision_vars_ub[6] = in3[0] * in5[0];
  decision_vars_ub[7] = in3[1] * in5[0];
  decision_vars_ub[8] = in3[2] * in5[1];
  decision_vars_ub[9] = in3[3] * in5[1];
  for (i = 0; i < 10; i++) {
    constraints_lb[i] = dv0[i];
    constraints_ub[i] = 0.0;
  }
}

//
// File trailer for Jump2DBounds.cpp
//
// [EOF]
//
