"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class wbc_test_data_t(object):
    __slots__ = ["contact_est", "fr_Fr_des", "fl_Fr_des", "hr_Fr_des", "hl_Fr_des", "fr_Fr", "fl_Fr", "hr_Fr", "hl_Fr"]

    __typenames__ = ["int32_t", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[2], [3], [3], [3], [3], [3], [3], [3], [3]]

    def __init__(self):
        self.contact_est = [ 0 for dim0 in range(2) ]
        self.fr_Fr_des = [ 0.0 for dim0 in range(3) ]
        self.fl_Fr_des = [ 0.0 for dim0 in range(3) ]
        self.hr_Fr_des = [ 0.0 for dim0 in range(3) ]
        self.hl_Fr_des = [ 0.0 for dim0 in range(3) ]
        self.fr_Fr = [ 0.0 for dim0 in range(3) ]
        self.fl_Fr = [ 0.0 for dim0 in range(3) ]
        self.hr_Fr = [ 0.0 for dim0 in range(3) ]
        self.hl_Fr = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(wbc_test_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2i', *self.contact_est[:2]))
        buf.write(struct.pack('>3f', *self.fr_Fr_des[:3]))
        buf.write(struct.pack('>3f', *self.fl_Fr_des[:3]))
        buf.write(struct.pack('>3f', *self.hr_Fr_des[:3]))
        buf.write(struct.pack('>3f', *self.hl_Fr_des[:3]))
        buf.write(struct.pack('>3f', *self.fr_Fr[:3]))
        buf.write(struct.pack('>3f', *self.fl_Fr[:3]))
        buf.write(struct.pack('>3f', *self.hr_Fr[:3]))
        buf.write(struct.pack('>3f', *self.hl_Fr[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != wbc_test_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return wbc_test_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = wbc_test_data_t()
        self.contact_est = struct.unpack('>2i', buf.read(8))
        self.fr_Fr_des = struct.unpack('>3f', buf.read(12))
        self.fl_Fr_des = struct.unpack('>3f', buf.read(12))
        self.hr_Fr_des = struct.unpack('>3f', buf.read(12))
        self.hl_Fr_des = struct.unpack('>3f', buf.read(12))
        self.fr_Fr = struct.unpack('>3f', buf.read(12))
        self.fl_Fr = struct.unpack('>3f', buf.read(12))
        self.hr_Fr = struct.unpack('>3f', buf.read(12))
        self.hl_Fr = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if wbc_test_data_t in parents: return 0
        tmphash = (0xa1140862fd8446b6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if wbc_test_data_t._packed_fingerprint is None:
            wbc_test_data_t._packed_fingerprint = struct.pack(">Q", wbc_test_data_t._get_hash_recursive([]))
        return wbc_test_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

